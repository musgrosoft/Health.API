// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

namespace Repositories.Migrations
{
    [DbContext(typeof(HealthContext))]
    [Migration("20181017095503_AddTargetKg")]
    partial class AddTargetKg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repositories.Models.ActivitySummary", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FairlyActiveMinutes");

                    b.Property<int>("LightlyActiveMinutes");

                    b.Property<int>("SedentaryMinutes");

                    b.Property<int>("VeryActiveMinutes");

                    b.HasKey("CreatedDate");

                    b.ToTable("ActivitySummaries");
                });

            modelBuilder.Entity("Repositories.Models.AlcoholIntake", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("Units");

                    b.HasKey("CreatedDate");

                    b.ToTable("AlcoholIntakes");
                });

            modelBuilder.Entity("Repositories.Models.BloodPressure", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<double?>("Diastolic");

                    b.Property<double?>("Systolic");

                    b.HasKey("CreatedDate");

                    b.ToTable("BloodPressures");
                });

            modelBuilder.Entity("Repositories.Models.Ergo", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("Metres");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("CreatedDate");

                    b.ToTable("Ergos");
                });

            modelBuilder.Entity("Repositories.Models.HeartRateSummary", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CardioMinutes");

                    b.Property<int?>("FatBurnMinutes");

                    b.Property<int?>("OutOfRangeMinutes");

                    b.Property<int?>("PeakMinutes");

                    b.HasKey("CreatedDate");

                    b.ToTable("HeartRateSummaries");
                });

            modelBuilder.Entity("Repositories.Models.RestingHeartRate", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Beats");

                    b.HasKey("CreatedDate");

                    b.ToTable("RestingHeartRates");
                });

            modelBuilder.Entity("Repositories.Models.Run", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("Metres");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("CreatedDate");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("Repositories.Models.StepCount", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Count");

                    b.HasKey("CreatedDate");

                    b.ToTable("StepCounts");
                });

            modelBuilder.Entity("Repositories.Models.Token", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Name");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Repositories.Models.Weight", b =>
                {
                    b.Property<DateTime>("CreatedDate");

                    b.Property<double?>("FatRatioPercentage");

                    b.Property<double?>("Kg");

                    b.Property<double?>("TargetKg");

                    b.HasKey("CreatedDate");

                    b.ToTable("Weights");
                });
#pragma warning restore 612, 618
        }
    }
}
